import numpy as np


def hex_to_bin(str):
    a = [int(i, 16) for i in str]
    b = ""
    for i in a:
        b += '{:04b}'.format(i)
    return b


def replacement(text, rule):
    res = ""
    for i in rule:
        res += text[i-1]
    return res


def subkey(c0, d0):
    listK = []
    for i in range(1, 17):
        if i == 1 or i == 2 or i == 9 or i == 16:
            c0 = c0[1:] + c0[0]
            d0 = d0[1:] + d0[0]
            k = c0 + d0
            listK.append(replacement(k, PC_2))
        else:
            c0 = c0[2:] + c0[:2]
            d0 = d0[2:] + d0[:2]
            k = c0 + d0
            listK.append(replacement(k, PC_2))
    return listK


def XOR(str1, str2):
    str = ""
    for i in range(len(str1)):
        if str1[i] == str2[i]:
            str += '0'
        else:
            str += '1'
    return str


def f(r, k, E, P, s):
    j = replacement(r, E)
    str = XOR(j, k)
    key = ""
    for i in range(8):
        temp = str[i*6:(i+1)*6]
        row = int(temp[0] + temp[-1], 2)
        column = int(temp[1: 5], 2)
        key += '{:04b}'.format(s[i][row, column])
    key = replacement(key, P)
    return key


def iterate(listK, l0, r0, E, P, s):
    for i in range(16):
        temp = r0
        ff = f(temp, listK[i], E, P, s)
        r0 = XOR(ff, l0)
        l0 = temp
        print("l",l0)
        print("r",r0)
    return replacement(r0+l0, IP_1)

if __name__ == '__main__':
    IP = [58, 50, 42, 34, 26, 18, 10, 2,
          60, 52, 44, 36, 28, 20, 12, 4,
          62, 54, 46, 38, 30, 22, 14, 6,
          64, 56, 48, 40, 32, 24, 16, 8,
          57, 49, 41, 33, 25, 17, 9, 1,
          59, 51, 43, 35, 27, 19, 11, 3,
          61, 53, 45, 37, 29, 21, 13, 5,
          63, 55, 47, 39, 31, 23, 15, 7]
    IP_1 = [40, 8, 48, 16, 56, 24, 64, 32,
            39, 7, 47, 15, 55, 23, 63, 31,
            38, 6, 46, 14, 54, 22, 62, 30,
            37, 5, 45, 13, 53, 21, 61, 29,
            36, 4, 44, 12, 52, 20, 60, 28,
            35, 3, 43, 11, 51, 19, 59, 27,
            34, 2, 42, 10, 50, 18, 58, 26,
            33, 1, 41, 9, 49, 17, 57, 25]
    PC_1 = [57, 49, 41, 33, 25, 17, 9,
            1, 58, 50, 42, 34, 26, 18,
            10, 2, 59, 51, 43, 35, 27,
            19, 11, 3, 60, 52, 44, 36,
            63, 55, 47, 39, 31, 23, 15,
            7, 62, 54, 46, 38, 30, 22,
            14, 6, 61, 53, 45, 37, 29,
            21, 13, 5, 28, 20, 12, 4]
    PC_2 = [14, 17, 11, 24, 1, 5,
            3, 28, 15, 6, 21, 10,
            23, 19, 12, 4, 26, 8,
            16, 7, 27, 20, 13, 2,
            41, 52, 31, 37, 47, 55,
            30, 40, 51, 45, 33, 48,
            44, 49, 39, 56, 34, 53,
            46, 42, 50, 36, 29, 32]
    E = [32, 1, 2, 3, 4, 5,
         4, 5, 6, 7, 8, 9,
         8, 9, 10, 11, 12, 13,
         12, 13, 14, 15, 16, 17,
         16, 17, 18, 19, 20, 21,
         20, 21, 22, 23, 24, 25,
         24, 25, 26, 27, 28, 29,
         28, 29, 30, 31, 32, 1]
    S1 = np.array([14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
                   0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
                   4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
                   15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]).reshape(4, 16)
    S2 = np.array([15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
                   3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
                   0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
                   13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]).reshape(4, 16)
    S3 = np.array([10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
                   13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
                   13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
                   1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]).reshape(4, 16)
    S4 = np.array([7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
                   13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
                   10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
                   3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]).reshape(4, 16)
    S5 = np.array([2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
                   14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
                   4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
                   11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]).reshape(4, 16)
    S6 = np.array([12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
                   10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
                   9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
                   4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]).reshape(4, 16)
    S7 = np.array([4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
                   13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
                   1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
                   6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]).reshape(4, 16)
    S8 = np.array([13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
                   1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
                   7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
                   2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]).reshape(4, 16)
    s = list((S1, S2, S3, S4, S5, S6, S7, S8))
    P = [16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10,
         2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25]
    # hex to bin
    strM = "0123456789ABCDEF"
    strK = "133457799BBCDFF1"
    plaintext = hex_to_bin(strM)
    K = hex_to_bin(strK)
    print(plaintext)
    print(K)

    # Initial Permutation
    res = replacement(plaintext, IP)
    L0 = res[:int(len(res)/2)]
    R0 = res[int(len(res)/2):]
    print("L0: ", L0)
    print("R0: ", R0)

    # Generate subkey
    resK = replacement(K, PC_1)
    C0 = resK[:int(len(resK)/2)]
    D0 = resK[int(len(resK)/2):]
    listK = subkey(C0, D0)

    ciphertext = iterate(listK, L0, R0,E, P, s)
    print("Ciphertext:", ciphertext)

    # bin to hex
    key = ""
    for i in range(int(len(ciphertext)/4)):
        key += hex(int(ciphertext[i*4: (i+1)*4], 2))[2:]
    print("Ciphertext: ", key.upper())